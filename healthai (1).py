# -*- coding: utf-8 -*-
"""HealthAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IW3JyMMQHPbL8Zb_KbZ-QWeBemOB2NTV
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)


custom_css = """
body, .gradio-container {
  background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
  color: #ffcb6b;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-attachment: fixed;
}

/* Styled markdown containers */
.gr-markdown {
  background: rgba(36, 36, 44, 0.9);
  color: #ffcb6b;
  padding: 24px;
  border-radius: 20px;
  box-shadow: 0 4px 20px rgba(255, 203, 107, 0.5);
  font-weight: 600;
  font-size: 1.2em;
  letter-spacing: 0.04em;
  transition: background 0.3s ease;
}

/* Textboxes, dropdowns, number inputs */
.gr-textbox, .gr-dropdown, .gr-number {
  background: linear-gradient(145deg, #1c1b29, #28293d);
  border: 2px solid #ffcb6b;
  color: #fff6d1;
  border-radius: 12px;
  box-shadow: inset 3px 3px 6px #121119,
              inset -3px -3px 6px #3a3550;
  font-weight: bold;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}
.gr-textbox:focus, .gr-dropdown:focus, .gr-number:focus {
  border-color: #ff6f61;
  box-shadow: 0 0 8px #ff6f61;
  outline: none;
}

/* Buttons styling */
.gr-button {
  background: linear-gradient(90deg, #ff6f61 30%, #ffcb6b 100%);
  color: #2b2b2b;
  font-weight: 700;
  text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
  border-radius: 18px;
  padding: 12px 28px;
  box-shadow: 0 6px 15px #ff6f61aa;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.gr-button:hover {
  transform: scale(1.1) rotate(-1deg);
  box-shadow: 0 8px 25px #ffcb6baa;
  color: #fff;
  background: linear-gradient(90deg, #ffcb6b 30%, #ff6f61 100%);
}

/* Tab headers */
.gr-tabs-header button {
  background: transparent;
  color: #ffcb6b;
  font-weight: 600;
  border-radius: 15px;
  padding: 10px 25px;
  margin: 0 5px;
  box-shadow: inset 0 0 10px #ffcb6b55;
  transition: background 0.3s ease, color 0.3s ease;
}
.gr-tabs-header button.selected {
  background: linear-gradient(90deg, #ff6f61, #ffcb6b);
  color: #24243e;
  box-shadow: 0 7px 18px #ff6f61cc;
}

/* Add subtle glowing animation to heading */
@keyframes glow {
  0%, 100% {
    text-shadow: 0 0 5px #ffcb6b, 0 0 15px #ff6f61;
    color: #ffcb6b;
  }
  50% {
    text-shadow: 0 0 8px #ff6f61, 0 0 20px #ffcb6b;
    color: #ff6f61;
  }
}
.gr-markdown > h2, .gr-markdown > h3 {
  animation: glow 3s ease-in-out infinite;
}
"""

with gr.Blocks(css=custom_css) as app:
    gr.Markdown("## ü©∫ **Medical AI Assistant**\n<span style='color:#ffcb6b;'>Your modern AI-powered medical tool.</span>")
    gr.Markdown("**‚ö†Ô∏è Disclaimer:** <span style='color:#ff6f61;'>This is for informational purposes only. Always consult healthcare professionals for medical advice.</span>")

    with gr.Tabs():
        with gr.TabItem("üîé Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("üß¨ Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)
            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("üìù Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("ü©∫ Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)
            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

app.launch(share=True)